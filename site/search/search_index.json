{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Project Homepage","text":""},{"location":"#welcome-to-our-project-homepage","title":"Welcome to Our Project Homepage","text":"<p>Welcome to the documentation of our embedded system project, developed by students at the \u00c9cole Nationale d'Ing\u00e9nieurs de Brest (ENIB). Our project focuses on configuring and retrieving information from two sensors: a color sensor (I2C) and a temperature and humidity sensor.</p>"},{"location":"#project-overview","title":"Project Overview","text":"<p>In this project, we integrated two types of sensors to collect environmental data:</p> <ul> <li>Color Sensor (I2C): This sensor detects the color of objects and communicates the data via the I2C protocol.</li> <li>Temperature and Humidity Sensor: This sensor measures ambient temperature and humidity levels.</li> </ul>"},{"location":"#sensors-used","title":"Sensors Used","text":""},{"location":"#grove-sht40-temperature-and-humidity-sensor","title":"Grove - SHT40 Temperature and Humidity Sensor","text":"<p>The Grove SHT40 digital sensor is based on Sensirion's industry-proven humidity and temperature sensors. It provides constant temperature and humidity accuracy over an extensive measurement range.</p>"},{"location":"#grove-tcs34725cs-color-sensor","title":"Grove - TCS34725CS Color Sensor","text":"<p>The TCS34725CS color sensor with digital I2C output is based on an 8x2 array of filtered photodiodes and 16-bit analog-to-digital converters. It measures the color chromaticity of ambient light or objects. Of the 16 photodiodes, 4 have red filters, 4 have green filters, 4 have blue filters, and 4 have no filter (clear). With the synchronization input pin, an external pulsed light source can provide precise synchronous conversion control.</p>"},{"location":"IHM/","title":"IHM System Overview","text":"<p>This document provides an overview of the IHM (Interface Homme-Machine) system we built using Electron.js. The IHM is designed to interact with an STM32 microcontroller, facilitating data communication and display via a user-friendly interface. The system consists of a browser-side application built with React.js and Tailwind CSS, and a server-side application built with Node.js to manage the database and handle serial communication using Socket.io.</p>"},{"location":"IHM/#architecture","title":"Architecture","text":"<p>The IHM system is composed of the following components:</p> <ol> <li>Browser-Side Application: Built with React.js and styled with Tailwind CSS.</li> <li>Server-Side Application: Built with Node.js, manages the database, and handles serial communication with the STM32 microcontroller.</li> <li>Electron.js: Wraps the browser-side application to create a cross-platform desktop application.</li> </ol>"},{"location":"IHM/#browser-side-application","title":"Browser-Side Application","text":""},{"location":"IHM/#server-side-application","title":"Server-Side Application","text":"<p>The server-side application is built using Node.js and handles the following tasks:</p> <ol> <li>Database Management: Manages the storage and retrieval of sensor data in a database (sqlite3).</li> <li>Serial Communication: Establishes communication with the STM32 microcontroller via a serial connection and processes the received data.</li> <li>Socket.io Integration: Integrates Socket.io to facilitate real-time communication with the browser-side application.</li> </ol> <p> </p>"},{"location":"IHM/#features","title":"Features","text":"<ol> <li>User Interface: Provides a user-friendly interface to display temperature and humidity data received from the STM32 microcontroller.</li> <li>Real-Time Updates: Uses Socket.io to receive real-time data updates from the server and display them in the UI.</li> <li>Data Visualization: Displays the sensor data in a clear and visually appealing manner, using charts.</li> </ol>"},{"location":"SHT40%20SENSOR/","title":"SHT40 SENSOR","text":"<p> This section provides a detailed explanation of the embedded system aspect of our project, focusing specifically on the Grove SHT40 Temperature and Humidity Sensor.</p>"},{"location":"SHT40%20SENSOR/#hardware-components","title":"Hardware Components","text":""},{"location":"SHT40%20SENSOR/#microcontroller-development-kit","title":"Microcontroller Development Kit","text":"<p>We utilize an STM32 microcontroller development kit to build and debug code for the card. This development kit, provided by the ENIB internal pack we use in our course (SDK pack), allows us to efficiently develop and debug firmware for the embedded system.</p>"},{"location":"SHT40%20SENSOR/#software-implementation","title":"Software Implementation","text":"<p>Before we can utilize the SHT40 sensor, it's crucial to establish communication with it using the I2C protocol and configure it with the appropriate settings. To achieve this, we need to implement basic functions that facilitate communication with the sensor. These functions serve as the foundation for all subsequent interactions with the sensor. </p>"},{"location":"SHT40%20SENSOR/#project-structure","title":"Project Structure","text":"<p>To integrate the SHT40 sensor into our project, you'll need to follow these steps:</p> <ol> <li>Create the necessary files:</li> <li><code>sht40.h</code>: Header file for SHT40 sensor interface.</li> <li><code>sht40.c</code>: Source file for SHT40 sensor implementation.</li> </ol>"},{"location":"SHT40%20SENSOR/#essential-functions-for-sensor-communication","title":"Essential Functions for Sensor Communication","text":"<p>To interact with the SHT40 sensor, we implement the following fundamental functions:</p> <ol> <li><code>sht4x_write(uint8_t reg, uint8_t value)</code>: This function writes a single byte of data to a specified register of the sensor..</li> </ol> <pre><code>    static int16_t sht4x_write(uint8_t reg, uint8_t value) {\n        uint8_t data[2];\n        data[0] = reg;\n        data[1] = value &amp; 0xFF;\n        return i2c_write(I2C1, SHT4X_ADDRESS, data, sizeof(data));\n    }\n</code></pre> <ol> <li><code>read(uint8_t reg , int delay)</code>: This function reads a single byte of data from a specified register of the sensor.</li> </ol> <pre><code>    static uint8_t sht4x_read(uint8_t reg, int delay) {\n        uint8_t value;\n        uint8_t reg_data[1] = {reg};\n\n        if (i2c_write(I2C1, SHT4X_ADDRESS, reg_data, 1) != I2C_OK) {\n            uart_puts(_USART2, \"\\n\\rErreur lors de l'\u00e9criture dans le registre\\n\");\n            return 0;\n        }\n\n        delay_us(delay);\n\n        if (i2c_read(I2C1, SHT4X_ADDRESS, &amp;value, 1) != I2C_OK) {\n            uart_puts(_USART2, \"\\n\\rErreur lors de la lecture d'octets\\n\");\n            return 0;\n        }\n\n        return value;\n    }\n</code></pre> <ol> <li><code>write_n(uint8_t reg, uint8_t* values, uint8_t length)</code>: This function writes multiple bytes of data to consecutive registers of the sensor.</li> </ol> <pre><code>    static int16_t sht4x_write_n(uint8_t reg, uint8_t* values, uint8_t length) {\n        uint8_t data[length + 1];\n        data[0] = reg;\n        for (size_t i = 0; i &lt; length; i++) {\n            data[i + 1] = values[i];\n        }\n        return i2c_write(I2C1, SHT4X_ADDRESS, data, sizeof(data));\n    }\n</code></pre> <ol> <li><code>read_n(uint8_t reg, uint8_t* values, uint8_t length, int delay)</code>: This function reads multiple bytes of data from consecutive registers of the sensor.</li> </ol> <pre><code>    void read_n(uint8_t reg, uint8_t* values, uint8_t length, int delay) {\n        uint8_t reg_data[1] = {reg};\n\n        if (i2c_write(I2C1, SHT4X_ADDRESS, reg_data, 1) != I2C_OK) {\n            uart_puts(_USART2,\"\\n\\rErreur lors de l'\u00e9criture dans le registre\\n\");\n            return I2C_ERROR;\n        }\n\n        delay_us(delay);\n\n        if (i2c_read(I2C1, SHT4X_ADDRESS, values, length) != I2C_OK) {\n            uart_puts(_USART2,\"\\n\\rErreur lors de la lecture d'octets\\n\");\n            return;\n        }\n    }\n</code></pre> <ol> <li><code>sht4x_write_cmd(const uint8_t* cmd)</code>: This function writes a command to the sensor.</li> </ol> <pre><code>    static int16_t sht4x_write_cmd(const uint8_t* cmd) {\n        return i2c_write(I2C1, SHT4X_ADDRESS, cmd, 1);\n    }\n</code></pre> <ol> <li><code>sht4x_write_cmd(const uint8_t* cmd)</code>: This function writes a command to the sensor.</li> </ol> <pre><code>    static int16_t sht4x_write_cmd(const uint8_t* cmd) {\n        return i2c_write(I2C1, SHT4X_ADDRESS, cmd, 1);\n    }\n</code></pre> <p>These functions provide the necessary groundwork for interacting with the SHT40 sensor via the I2C protocol. Once implemented, we can proceed with initializing the sensor and configuring it according to our project requirements.</p>"},{"location":"SHT40%20SENSOR/#key-details-about-the-sht40-sensor","title":"Key Details about the SHT40 Sensor","text":""},{"location":"SHT40%20SENSOR/#i2c-communication","title":"I2C Communication:","text":"<ul> <li>Specification: Based on NXP\u2019s I2C-bus specification.</li> <li>Supported Modes: Standard, fast mode, and fast mode plus.</li> <li>Data Transfer: Transferred in multiples of 16-bit words with an 8-bit checksum (CRC).</li> <li>Addressing: 7-bit I2C address followed by an eighth bit, denoting communication direction.</li> <li>Documentation: SHT40 Documentation</li> </ul>"},{"location":"SHT40%20SENSOR/#data-type-length","title":"Data Type &amp; Length:","text":"<ul> <li>Operates with: 8-bit data packages.</li> <li>Checksum: Included after every second 8-bit data package.</li> <li>Transmission: Humidity and temperature data transmitted in a specific format.</li> </ul>"},{"location":"SHT40%20SENSOR/#checksum-calculation","title":"Checksum Calculation:","text":"<ul> <li>For Read Transfers: Each 16-bit data is followed by a checksum using CRC-8 algorithm.</li> </ul>"},{"location":"SHT40%20SENSOR/#command-overview","title":"Command Overview:","text":"<ul> <li>Various Commands: Available for different operations like measuring temperature and humidity, reading serial number, etc.</li> </ul> <p>Refer to the documentation for detailed specifications and usage instructions.</p>"},{"location":"SHT40%20SENSOR/#sensor-initialization","title":"Sensor Initialization","text":"<p>To use the SHT40 sensor, we need to initialize the I2C communication and configure the sensor. For initialization, we first read the serial number to ensure that the sensor is connected and functioning properly. The process involves detecting if a sensor is connected by reading out the ID register. If the sensor does not answer or if the answer is not the expected value, the test fails.</p> <pre><code>/**\n * Detects if a sensor is connected by reading out the ID register. If the sensor does not answer\n * or if the answer is not the expected value, the test fails.\n *\n * @return 0 if a sensor was detected\n */\nint16_t sht4x_probe(void);\n\nint16_t sht4x_probe(void) {\n    uint32_t serial;\n    return sht4x_read_serial(&amp;serial);\n}\n</code></pre> <pre><code>// Internal function to retrieve the number of words divided by the word size (2 bytes)\n#define SENSIRION_WORD_SIZE 2\n#define SENSIRION_NUM_WORDS(x) (sizeof(x) / SENSIRION_WORD_SIZE)\n\n// Duration necessary to write command\n#define SHT4X_CMD_DURATION_USEC \n\nint16_t sht4x_read_serial(uint32_t* serial) {\n    const uint8_t cmd = SHT4X_CMD_READ_SERIAL;\n    int16_t ret;\n    uint16_t serial_words[SENSIRION_NUM_WORDS(*serial)];\n    ret = write_cmd(&amp;sht4x_cmd_measure);\n    if (ret)\n        return ret;\n    read_n((uint8_t*)serial_words,sizeof(serial_words));\n    *serial = ((uint32_t)serial_words[0] &lt;&lt; 16) | serial_words[1];\n    return I2C_OK;\n}\n</code></pre>"},{"location":"SHT40%20SENSOR/#task-one","title":"Task One","text":"<p>After initialization, we can now retrieve the temperature and humidity data. To do this, we need to create a function that allows us to read the temperature and humidity. Below is the function we developed:</p> <pre><code>int16_t sht4x_measure_blocking_read(float* temperature, float* humidity) {\n    int16_t ret;\n    ret = write_cmd(&amp;sht4x_cmd_measure);\n    if (ret)\n        return ret;\n    delay_us(sht4x_cmd_measure_delay_us);\n    return sht4x_read_measurement(temperature, humidity);\n}\n</code></pre>"},{"location":"SHT40%20SENSOR/#function-explanation","title":"Function Explanation","text":"<p>To read the temperature, we start by writing a command. After this, we can read the data. Similar to other sensors where a register pointer is used, we first send a write header to the I2C slave followed by a command. For example, \"measure RH&amp;T with highest precision.\" After the measurement is finished, the read request directed to the I2C slave will be acknowledged, and the transmission of data will be started by the slave.</p>"},{"location":"SHT40%20SENSOR/#here-is-an-image-explaining-the-process","title":"Here is an image explaining the process:","text":"<p>After sending the command, we can read the temperature and humidity. We need to use a formula to convert each value correctly. Refer to the documentation SHT40 Documentation for more details.</p> <pre><code>int16_t sht4x_read_measurement(float* temperature, float* humidity) {\n    uint16_t rawTemp, rawHumd;\n    uint16_t words[2];\n    int16_t ret = read_n(words,SENSIRION_NUM_WORDS(words));\n    if (ret)\n        return ret;\n    /**\n     * formulas for conversion of the sensor signals, optimized for fixed point\n     * algebra:\n     * Temperature = 175 * S_T / 65535 - 45\n     * Relative Humidity = 125 * (S_RH / 65535) - 6\n     */\n\n    rawTemp = ((uint16_t) words[0] &lt;&lt; 8) | words[1];\n    rawHumd = ((uint16_t) words[2] &lt;&lt; 8) | words[3];\n\n    *temperature = (-45.0f + 175.0f * (rawTemp / 65535.0f));\n    *humidity = (-6.0f + 125.0f * (rawHumd / 65535.0f)); \n\n    return ret;\n}\n</code></pre>"},{"location":"SHT40%20SENSOR/#task-two","title":"Task Two","text":"<p>Great, now we can test if this works well. We need to use serial UART ST-LINK to display the current temperature and humidity in the terminal. Here is a test where we define main.c. We will do the first test by adding some code to transform a float into two parts: the integer part and the decimal part.</p> <pre><code>#include \"libshield/sht4x.h\"\n#define delay_us(us)        timer_wait_us(_TIM3, us)\n\n\nstatic void on_command_received(char c) {\n    command = c;\n}\n\nint main(void) {\n    uart_init(_USART2, 115200, UART_8N1, on_command_received);\n    i2c_master_init(_I2C1);\n    while (sht4x_probe() != 0) {\n        uart_printf(UART_TO_USE, \"SHT sensor probing failed\\n\");\n        delay_us(1000);  // Sleep 1s\n    }\n\n    while (1) {\n                float temperature, humidity;\n                int8_t ret = sht4x_measure_blocking_read(&amp;temperature, &amp;humidity);\n                if (ret == 0) {\n                    int temp_int = (int) temperature;\n                    float temp_frac = temperature - temp_int;\n                    int hum_int = (int) humidity;\n                    float hum_frac = humidity - hum_int;\n\n                    int temp_int_frac = (int)(temp_frac * 1000);\n                    int hum_int_frac = (int)(hum_frac * 1000);\n\n                    uart_printf(UART_TO_USE, \"\\r\\ntemperature: %d.%d C\", temp_int, temp_int_frac);\n                    uart_printf(UART_TO_USE, \"\\r\\nhumidity: %d.%d\", hum_int, hum_int_frac);\n\n                    delay_us(1000);  // Sleep 1s\n\n                } else {\n                    uart_printf(UART_TO_USE, \"\\r\\nError reading measurement\");\n                }\n                break;\n    }\n    return 0;\n}\n</code></pre>"},{"location":"SHT40%20SENSOR/#summary","title":"Summary","text":"<p>In this section, we include the essential details about the SHT40 sensor, its basic functionalities, and how to interface it with a microcontroller to read and display temperature and humidity values using UART. We also provide a sample code implementation for initializing the sensor, reading data, and handling errors. After this, we will add more extra features and improvements to enhance the functionality and reliability of the system.</p>"},{"location":"TCS3414CS%20SENSOR/","title":"TCS34725CS SENSOR","text":"<p> This section provides a detailed explanation of the embedded system aspect of our project, focusing specifically on the Grove The TCS34725CS color sensor.</p>"},{"location":"TCS3414CS%20SENSOR/#hardware-components","title":"Hardware Components","text":""},{"location":"TCS3414CS%20SENSOR/#microcontroller-development-kit","title":"Microcontroller Development Kit","text":"<p>We utilize an STM32 microcontroller development kit to build and debug code for the card. This development kit, provided by the ENIB internal pack we use in our course (SDK pack), allows us to efficiently develop and debug firmware for the embedded system.</p>"},{"location":"TCS3414CS%20SENSOR/#software-implementation","title":"Software Implementation","text":"<p>Before we can utilize the TCS34725CS sensor, it's crucial to establish communication with it using the I2C protocol and configure it with the appropriate settings. To achieve this, we need to implement basic functions that facilitate communication with the sensor. These functions serve as the foundation for all subsequent interactions with the sensor. </p>"},{"location":"TCS3414CS%20SENSOR/#project-structure","title":"Project Structure","text":"<p>To integrate the TCS34725CS sensor into our project, follow these steps:</p> <ol> <li>Create the necessary files:</li> <li><code>TCS34725CS.h</code>: Header file for the TCS34725CS sensor interface.</li> <li><code>TCS34725CS.c</code>: Source file for the TCS34725CS sensor implementation.</li> </ol>"},{"location":"TCS3414CS%20SENSOR/#essential-functions-for-sensor-communication","title":"Essential Functions for Sensor Communication","text":"<p>To interact with the TCS34725CS sensor, we implement the following fundamental functions in addition to the basic functions previously discussed for the SHT40 sensor. One of these functions allows us to get a 16-bit value from the sensor:</p> <pre><code>uint16_t read16(uint8_t reg) {\n    uint16_t x;\n\n    uint8_t reg_data[1] = { TCS34725_COMMAND_BIT | reg };\n    if (i2c_write(I2C1, TCS34725_ADDRESS, reg_data, 1) != I2C_OK) {\n        uart_puts(_USART2, \"\\n\\rErreur lors de l'\u00e9criture dans le registre\\n\");\n        return 0; \n    }\n\n    uint8_t data[2];\n    if (i2c_read(I2C1, TCS34725_ADDRESS, data, 2) != I2C_OK) {\n        uart_puts(_USART2, \"\\n\\rErreur lors de la lecture d'octets\\n\");\n        return 0; \n    }\n\n    x = data[1];\n    x &lt;&lt;= 8;\n    x |= data[0];\n\n    return x;\n}\n</code></pre>"},{"location":"TCS3414CS%20SENSOR/#command-bit","title":"Command Bit","text":"<p>The TCS34725_COMMAND_BIT is defined as 0x80. This bit is used to indicate that the following byte is a command for the TCS34725CS sensor. When interacting with the sensor, this bit is OR-ed with the register address to form the command byte.</p>"},{"location":"TCS3414CS%20SENSOR/#sensor-initialization","title":"Sensor Initialization","text":"<p>To use the TCS34725CS sensor, we need to initialize the I2C communication and configure the sensor. For initialization, we first read the serial number to ensure that the sensor is connected and functioning properly. The process involves detecting if a sensor is connected by reading out the ID register. If the sensor does not answer or if the answer is not the expected value, the test fails.</p> <pre><code>void tcs34725_init(void) {\n    // Initialize I2C communication on I2C1\n    // Check if the initialization was successful\n    if (i2c_master_init(I2C1) != I2C_OK) {\n        // If I2C initialization fails, print an error message to the UART\n        uart_puts(_USART2, \"\\n\\rErreur: Communication I2C non initialis\u00e9e\\n\");\n        return; \n    }\n\n    // Read the ID register of the TCS34725 sensor\n    uint8_t id = read8(TCS34725_ID);\n    // Check if the ID matches the expected values (0x44 or 0x10)\n    if ((id != 0x44) &amp;&amp; (id != 0x10)) {\n        // If the ID does not match, print an error message to the UART\n        uart_puts(_USART2, \"\\n\\rErreur: ID Incorrect\\n\");\n        return; \n    }\n\n    // Define the configuration for the TCS34725 sensor\n    tcs34725_config_t config = {\n        .enable = TCS34725_ENABLE_PON | TCS34725_ENABLE_AEN, // Enable the power-on and ADC\n        .integration_time = TCS34725_INTEGRATIONTIME_700MS, // Set the integration time to 700ms\n        .gain = TCS34725_GAIN_1X // Set the gain to 1x\n    };\n    // Write the configuration settings to the sensor\n    write8(TCS34725_ENABLE, config.enable); // Enable the sensor\n    write8(TCS34725_ATIME, config.integration_time); // Set the integration time\n    write8(TCS34725_CONTROL, config.gain); // Set the gain\n\n    return;\n}\n</code></pre>"},{"location":"TCS3414CS%20SENSOR/#task-one","title":"Task One","text":""},{"location":"TCS3414CS%20SENSOR/#reading-rgb-and-clear-values","title":"Reading RGB and Clear Values","text":"<p>After the initialization is complete, we need to develop a function to retrieve the RGB and clear values from the sensor. Here is the function to do this:</p> <pre><code>/**\n * @brief Reads the RGB and clear values from the TCS34725 sensor.\n *\n * This function reads the clear, red, green, and blue data from their respective\n * data registers. It also waits for the appropriate integration time to ensure\n * the data is ready before reading.\n *\n * @param red Pointer to store the red value.\n * @param green Pointer to store the green value.\n * @param blue Pointer to store the blue value.\n * @param clear Pointer to store the clear value.\n */\nvoid tcs34725_read_color(uint16_t *red, uint16_t *green, uint16_t *blue, uint16_t *clear) {\n    // Read the clear, red, green, and blue data from their respective data registers\n    *clear = read16(TCS34725_CDATAL);\n    *red = read16(TCS34725_RDATAL);\n    *green = read16(TCS34725_GDATAL);\n    *blue = read16(TCS34725_BDATAL);\n\n    // Read the integration time register\n    uint8_t atime_reg = read8(TCS34725_ATIME);\n    // Calculate the integration time in milliseconds\n    uint16_t integration_time = (256 - atime_reg) * 2.4;\n\n    // Wait for the integration time to ensure data is ready\n    // Note: The delay_us function is assumed to be available for microsecond delays\n    switch (integration_time) {\n        case 2: // 2.4 ms\n            delay_us(3000); // Delay for 3 ms to ensure data is ready\n            break;\n        case 24: // 24 ms\n            delay_us(24000); // Delay for 24 ms to ensure data is ready\n            break;\n        case 50: // 50 ms\n            delay_us(50000); // Delay for 50 ms to ensure data is ready\n            break;\n        case 101: // 101 ms\n            delay_us(101000); // Delay for 101 ms to ensure data is ready\n            break;\n        case 154: // 154 ms\n            delay_us(154000); // Delay for 154 ms to ensure data is ready\n            break;\n        case 700: // 700 ms\n            delay_us(700000); // Delay for 700 ms to ensure data is ready\n            break;\n        default:\n            // If the integration time does not match any of the cases, no delay is needed\n            break;\n    }\n}\n</code></pre> <p>The switch-case statement uses the calculated integration time to delay the appropriate amount of time to ensure the data is ready. The delay_us function is assumed to be available to create delays in microseconds. The delay times are adjusted slightly to ensure proper timing.</p>"},{"location":"TCS3414CS%20SENSOR/#calculating-color-temperature","title":"Calculating Color Temperature","text":"<p>After obtaining the RGB values, we can calculate the color temperature using the following function This function uses the RGB values to calculate the CIE 1931 XYZ color space values,and then computes the correlated color temperature (CCT) using the CIE 1931 xy chromaticity coordinates.</p> <pre><code>/**\n * @brief Calculates the color temperature from the RGB values.\n * @param r Red value.\n * @param g Green value.\n * @param b Blue value.\n * @param x Pointer to store the x chromaticity coordinate.\n * @param y Pointer to store the y chromaticity coordinate.\n * @return The calculated color temperature in Kelvin.\n */\nfloat calculateColorTemperature(uint16_t r, uint16_t g, uint16_t b, float *x, float *y) {\n    float X, Y, Z;\n    float XYZ_sum;\n\n    // Convert RGB values to CIE 1931 XYZ color space(The RGB values are converted to the CIE 1931 XYZ color space using the following equations)\n    X = (-0.14282f * r + 1.54924f * g - 0.95641f * b);\n    Y = (-0.32466f * r + 1.57837f * g - 0.73191f * b);\n    Z = (-0.68202f * r + 0.77073f * g + 0.56332f * b);\n\n    // Sum of XYZ components\n    XYZ_sum = X + Y + Z;\n    if (XYZ_sum != 0) {\n        // Calculate the x and y chromaticity coordinates\n        *x = X / XYZ_sum;\n        *y = Y / XYZ_sum;\n    } else {\n        // Default values if XYZ_sum is zero\n        *x = 0.3320f;\n        *y = 0.1858f;\n    }\n\n    // Calculate n value used in the CCT formula\n    float n = (*x - 0.3320f) / (0.1858f - *y);\n\n    // Calculate the correlated color temperature (CCT) using the CIE 1931 xy to CCT formula\n    // CCT = 437*n^3 + 3601*n^2 + 6861*n + 5517\n    float cct = ((437 * n * n * n) + (3601 * n * n) + (6861 * n) + 5517);\n\n    return cct;\n}\n</code></pre> <p>For more information on the CIE 1931 xy to CCT formula, you can refer to this (link)</p>"},{"location":"TCS3414CS%20SENSOR/#calculating-illuminance-lux","title":"Calculating Illuminance (Lux)","text":"<p>After obtaining the RGB values, we can calculate the illuminance (lux) using the following function:</p> <pre><code>/**\n * @brief Calculates the illuminance (lux) from the RGB values.\n *\n * This function uses the RGB values to calculate the illuminance in lux based on\n * a weighted sum of the red, green, and blue components.\n *\n * @param r Red value.\n * @param g Green value.\n * @param b Blue value.\n * @return The calculated illuminance in lux.\n */\nfloat calculateLux(uint16_t r, uint16_t g, uint16_t b) {\n    float illuminance;\n\n    // Calculate illuminance using a weighted sum of the RGB values\n    // The weights are derived from the spectral sensitivity of the sensor\n    illuminance = (-0.32466f * r) + (1.57837f * g) + (-0.73191f * b);\n\n    // Return the calculated illuminance\n    return (uint16_t)illuminance;\n}\n</code></pre> <p>By using this function, you can convert the RGB values obtained from the TCS34725 sensor into an illuminance value in lux, providing a measure of the light intensity. For more detailed information on how illuminance is calculated from RGB values and the spectral sensitivity of the sensor, you can refer to relevant technical documentation and research papers on color sensing and photometry.</p>"},{"location":"TCS3414CS%20SENSOR/#task-two","title":"Task Two","text":""},{"location":"TCS3414CS%20SENSOR/#testing-color-and-illuminance-calculation","title":"Testing Color and Illuminance Calculation","text":"<p>Great, now we can test if this works well. We need to use serial UART ST-LINK to display x, y, lux, and color temperature in Kelvin in the terminal. Here is a test where we define <code>main.c</code>.</p> <pre><code>case 'c': {// Get current color\n                uint16_t red, green, blue, clear, color_temp, lux;\n                float x, y;\n\n                tcs34725_read_color(&amp;red, &amp;green, &amp;blue, &amp;clear);\n                color_temp = calculateColorTemperature(red, green, blue, &amp;x, &amp;y);\n                lux = calculateLux(red, green, blue);\n\n                // Convertir les coordonn\u00e9es chromatiques en parties enti\u00e8res et d\u00e9cimales\n                int x_int =(int)x;\n                float x_frac = x-x_int;\n                int x_frac_int = (int)(x_frac * 1000);\n                int y_int = (int)y;\n                float y_frac = y-y_int;\n                int y_frac_int= (int)(y_frac*1000);\n\n                // Afficher (x,y) avec illuminance (color + brightness  )\n                uart_printf(UART_TO_USE, \"\\r\\nx = %d.%d , y=%d.%d, illuminance=%d\\r\\n\", x_int, x_frac_int, y_int, y_frac_int,lux);\n                uart_printf(UART_TO_USE, \"\\r\\nTemperature en Kelvin: %d\\n\", color_temp);\n\n                timer_start(_TIM2);  // Sleep 1s\n                #endif\n                break;\n            }\n</code></pre>"},{"location":"TCS3414CS%20SENSOR/#example-output","title":"Example Output","text":"<p>When the sensor detects color and calculates the values, the output in the terminal might look like this:</p> <pre><code>x = 0.332, y = 0.185, illuminance = 123\nTemperature in Kelvin: 5500\n</code></pre>"},{"location":"TCS3414CS%20SENSOR/#verification","title":"Verification","text":"<p>We can verify if the x, y coordinates and the lux values are correct by using a CIE 1931 xy to CCT calculator. Here is an example showing the process: </p> <p>For more information on the CIE 1931 xy to CCT formula and how to use it, you can refer to this (link)</p>"},{"location":"TCS3414CS%20SENSOR/#summary","title":"Summary","text":"<p>In this section, we include the essential details about the TCS34725CS sensor, its basic functionalities, and how to interface it with a microcontroller to read and display color temperature, chromaticity coordinates, and illuminance values using UART. We also provide a sample code implementation for initializing the sensor, reading data, and handling errors.</p>"},{"location":"Test/","title":"Test","text":""},{"location":"Test/#microcontroleur","title":"Microcontroleur","text":""},{"location":"Test/#prerequisites","title":"Prerequisites","text":"<p>Before cloning and testing the project, ensure that you have the following prerequisites installed:</p> <p>ENIB Kit: You need to install the ENIB kit from here to use certain features of the project.</p>"},{"location":"Test/#cloning-and-testing-our-project","title":"Cloning and Testing Our Project","text":"<p>To clone and test our project, follow these steps:</p> <p>1-Clone the Repository: Open your terminal or command prompt and run the following command to clone the repository to your local machine: <pre><code>git clone https://github.com/Eljily-Mohamed/Projet-Emb.git\n</code></pre> 2-Navigate to Project Directory: Change your current directory to the project directory by running:</p> <p><pre><code>cd Projet-Emb\n</code></pre> 3-Make the Project:you can use the make command to build the project. Run: <pre><code>make\n</code></pre> 4- Launch the Debug File : You need to launch the debug file. Use the following command to debug the main.elf file Run: <pre><code>dbg main.elf\n</code></pre> 5- Test with st-link : You can use minicom, gtkterm, or any similar terminal emulator to display the temperature and humidity. Ensure you use the port ttyACM0 and set the baud rate to 115200. You can start minicom with the following command. Run: <pre><code>minicom -D /dev/ttyACM0 -b 115200\n</code></pre> 6- Get Temperature and Humidity :  After starting minicom, to get the temperature and humidity, type the command: <pre><code>commande = t\n</code></pre> 7- Get color Infos : After starting minicom, to get the color information such as(temperature (Kelvin) , lux, ..), type the command: <pre><code>commande = c\n</code></pre> Following this guide, you should be able to successfully clone, build, and test our microcontroller project</p>"},{"location":"Test/#ihm","title":"IHM","text":""}]}